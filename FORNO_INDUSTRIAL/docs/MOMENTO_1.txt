?? LABORATÓRIO DIDÁTICO – FORNO INDUSTRIAL INTELIGENTE (ARDUINO UNO + SCADA EM C#)OBJETIVO: construir, simular e (se desejado) executar em hardware real um sistema de controle de temperatura de um forno industrial, com sensores, alarmes, atuadores, funções bem definidas, interrupções e compromisso com tempo de resposta. No topo, expor uma API em C# e uma interface estilo SCADA (dashboard + comandos + alarmes + tendências) para operar e supervisionar o processo.MOMENTO 1 — ARDUINO (FIRMWARE E TEMPO REAL)OBJETIVOS DE APRENDIZAGEM* Escrever código limpo e não bloqueante (usar millis()), modularizar em funções (leitura, controle, telemetria).* Entender interrupções (E-STOP em INT0), latência de reação e conflitos de timers (PWM/tone).* Ler sensor analógico (ADC) e acionar atuadores (PWM) com compromisso de tempo.DEMONSTRAÇÕES-CHAVE* Medir e exibir DT_ESTOP_US (latência do E-STOP) e LOOP_US (tempo de ciclo) na telemetria.* Mostrar o efeito de um pequeno delay() no loop() e como ele piora a latência (experimento guiado).* Discutir rapidamente a arquitetura do ATmega328P (ADC de 10 bits, timers, pinos PWM) e a escolha de pinos para evitar conflitos (tone() x Timer2, PWM em D5/D6, etc.).ATIVIDADE PRÁTICA* Alunos compilarão, executarão (simulador/hardware) e forçarão um E-STOP para capturar a latência real.* Micro-exercício de refactor: extrair funções (processAuto, processManual, publishTelemetry), remover qualquer resquício de delay() e revisar nomes/constantes.MÉTRICAS DE SUCESSO* E-STOP < 50 ms (registrado).* Telemetria 10 Hz estável.* Código sem travas e com funções claras.RISCOS & MITIGAÇÃO* Porta serial ocupada ? fechar Monitor Serial antes de upload.* Sensor simulado/hardware não responde ? usar SimulatedDevice na API para prosseguir o lab.