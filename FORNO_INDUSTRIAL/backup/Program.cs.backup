using Microsoft.AspNetCore.Mvc;
using Forno.Api.Device;
using Forno.Api.Hubs;

var builder = WebApplication.CreateBuilder(args);

// ========== CONFIGURA√á√ÉO DE PORTA ==========
builder.WebHost.UseUrls("http://localhost:5002");

// ========== CONFIGURA√á√ÉO DE SERVI√áOS ==========

// Logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.AddDebug();

// Device Configuration
var useSimulator = builder.Configuration.GetValue("UseSimulator", true);
var serialPort = builder.Configuration.GetValue("SerialPort", "/dev/tty.usbmodem1101"); // macOS

if (useSimulator)
{
    builder.Services.AddSingleton<IDevice, SimulatedDevice>();
    Console.WriteLine("üî• Configurado para usar SIMULADOR do Forno Industrial");
}
else
{
    builder.Services.AddSingleton<IDevice>(_ => new ArduinoDevice(serialPort));
    Console.WriteLine($"üîå Configurado para Arduino na porta: {serialPort}");
}

// Services
builder.Services.AddHostedService<DeviceHost>();
builder.Services.AddHostedService<TelemetryBroadcastService>();
builder.Services.AddSingleton<LastLogService>();

// Swagger/OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() 
    { 
        Title = "Forno Industrial API", 
        Version = "v1",
        Description = "API para controle e monitoramento do Forno Industrial - MOMENTO 2"
    });
});

// SignalR
builder.Services.AddSignalR();

// CORS para desenvolvimento
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
        policy.AllowAnyOrigin()
              .AllowAnyHeader()
              .AllowAnyMethod());
    
    // Pol√≠tica espec√≠fica para SignalR (precisa de AllowCredentials)
    options.AddPolicy("SignalRPolicy", policy =>
        policy.WithOrigins("http://localhost:5001", "https://localhost:5001")
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials());
});

// ========== CONFIGURA√á√ÉO DA APLICA√á√ÉO ==========

var app = builder.Build();

// Swagger (habilitado para desenvolvimento e testes)
// Removendo restri√ß√£o de ambiente para permitir acesso ao Swagger
app.UseSwagger();
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Forno Industrial API v1");
    c.RoutePrefix = "swagger"; // Acesso via /swagger
});

// CORS deve vir antes de UseRouting e aplicar a todos os endpoints
app.UseCors("SignalRPolicy");
app.UseRouting();

// SignalR Hub - com pol√≠tica espec√≠fica para credenciais
app.MapHub<FornoHub>("/hubs/forno");

// Endpoint de teste para SignalR
app.MapGet("/signalr-test", () =>
{
    return Results.Content(@"
<!DOCTYPE html>
<html lang=""pt-BR"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>üî• Monitor Forno Industrial - SignalR</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js""></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .status-badge {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            margin: 10px 0;
            transition: all 0.3s ease;
        }
        
        .status-connected {
            background: #4CAF50;
            color: white;
        }
        
        .status-error {
            background: #f44336;
            color: white;
        }
        
        .status-connecting {
            background: #ff9800;
            color: white;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px rgba(0,0,0,0.15);
        }
        
        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .card-icon {
            font-size: 2rem;
            margin-right: 15px;
        }
        
        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #eee;
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            font-weight: 500;
            color: #666;
        }
        
        .metric-value {
            font-weight: bold;
            font-size: 1.1rem;
        }
        
        .temp-value {
            color: #ff6b35;
            font-size: 1.5rem;
        }
        
        .status-on {
            color: #4CAF50;
        }
        
        .status-off {
            color: #666;
        }
        
        .status-active {
            color: #f44336;
            animation: pulse 2s infinite;
        }
        
        .estado-normal {
            color: #4CAF50;
        }
        
        .estado-aquecendo {
            color: #ff9800;
        }
        
        .estado-resfriando {
            color: #2196F3;
        }
        
        .estado-critico {
            color: #f44336;
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.6; }
            100% { opacity: 1; }
        }
        
        .timestamp {
            text-align: center;
            color: #666;
            font-size: 0.9rem;
            margin-top: 20px;
            padding: 10px;
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
        }
        
        .loading {
            text-align: center;
            color: white;
            font-size: 1.2rem;
        }
        
        .loading:after {
            content: '';
            animation: dots 1.5s steps(4, end) infinite;
        }
        
        @keyframes dots {
            0%, 20% { content: ''; }
            40% { content: '.'; }
            60% { content: '..'; }
            80%, 100% { content: '...'; }
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div class=""header"">
            <h1>üî• Monitor Forno Industrial</h1>
            <div id=""status"" class=""status-badge status-connecting"">Conectando ao SignalR...</div>
        </div>
        
        <div id=""loading"" class=""loading"">Aguardando dados de telemetria</div>
        
        <div id=""dashboard"" class=""dashboard"" style=""display: none;"">
            <div class=""card"">
                <div class=""card-header"">
                    <div class=""card-icon"">üå°Ô∏è</div>
                    <div class=""card-title"">Temperatura</div>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Atual</span>
                    <span id=""temp-atual"" class=""metric-value temp-value"">--¬∞C</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Setpoint</span>
                    <span id=""temp-setpoint"" class=""metric-value"">--¬∞C</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Alarme</span>
                    <span id=""temp-alarme"" class=""metric-value"">--¬∞C</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Cr√≠tica</span>
                    <span id=""temp-critica"" class=""metric-value"">--¬∞C</span>
                </div>
            </div>
            
            <div class=""card"">
                <div class=""card-header"">
                    <div class=""card-icon"">‚öôÔ∏è</div>
                    <div class=""card-title"">Atuadores</div>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">üî• Ma√ßarico</span>
                    <span id=""macarico"" class=""metric-value"">--</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">üí® Ventilador</span>
                    <span id=""ventilador"" class=""metric-value"">--</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">üö® Alarme</span>
                    <span id=""alarme"" class=""metric-value"">--</span>
                </div>
            </div>
            
            <div class=""card"">
                <div class=""card-header"">
                    <div class=""card-icon"">üìä</div>
                    <div class=""card-title"">Sistema</div>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Estado</span>
                    <span id=""estado"" class=""metric-value"">--</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Sistema Ativo</span>
                    <span id=""sistema-ativo"" class=""metric-value"">--</span>
                </div>
                <div class=""metric"">
                    <span class=""metric-label"">Interrup√ß√£o Cr√≠tica</span>
                    <span id=""interrupcao"" class=""metric-value"">--</span>
                </div>
            </div>
        </div>
        
        <div id=""timestamp"" class=""timestamp"" style=""display: none;""></div>
    </div>
    
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl(""/hubs/forno"")
            .build();

        const statusEl = document.getElementById('status');
        const loadingEl = document.getElementById('loading');
        const dashboardEl = document.getElementById('dashboard');
        const timestampEl = document.getElementById('timestamp');

        connection.start().then(function () {
            statusEl.className = 'status-badge status-connected';
            statusEl.innerText = '‚úÖ Conectado ao SignalR Hub';
            connection.invoke('JoinMonitoring');
        }).catch(function (err) {
            statusEl.className = 'status-badge status-error';
            statusEl.innerText = '‚ùå Erro de Conex√£o';
            console.error(err);
        });

        connection.on('TelemetryUpdate', function (telemetry) {
            loadingEl.style.display = 'none';
            dashboardEl.style.display = 'grid';
            timestampEl.style.display = 'block';
            
            // Temperatura
            document.getElementById('temp-atual').innerText = telemetry.temperaturaAtual.toFixed(1) + '¬∞C';
            document.getElementById('temp-setpoint').innerText = telemetry.setPoint + '¬∞C';
            document.getElementById('temp-alarme').innerText = telemetry.temperaturaAlarme + '¬∞C';
            document.getElementById('temp-critica').innerText = telemetry.temperaturaCritica + '¬∞C';
            
            // Atuadores
            const macaricoEl = document.getElementById('macarico');
            macaricoEl.innerText = telemetry.macaricoLigado ? 'LIGADO' : 'DESLIGADO';
            macaricoEl.className = 'metric-value ' + (telemetry.macaricoLigado ? 'status-on' : 'status-off');
            
            const ventiladorEl = document.getElementById('ventilador');
            ventiladorEl.innerText = telemetry.ventiladorLigado ? 'LIGADO' : 'DESLIGADO';
            ventiladorEl.className = 'metric-value ' + (telemetry.ventiladorLigado ? 'status-on' : 'status-off');
            
            const alarmeEl = document.getElementById('alarme');
            alarmeEl.innerText = telemetry.alarmeAtivo ? 'ATIVO' : 'INATIVO';
            alarmeEl.className = 'metric-value ' + (telemetry.alarmeAtivo ? 'status-active' : 'status-off');
            
            // Sistema
            const estadoEl = document.getElementById('estado');
            estadoEl.innerText = telemetry.estado;
            let estadoClass = 'metric-value ';
            if (telemetry.estado.includes('CRITICA')) estadoClass += 'estado-critico';
            else if (telemetry.estado.includes('AQUECENDO')) estadoClass += 'estado-aquecendo';
            else if (telemetry.estado.includes('RESFRIANDO')) estadoClass += 'estado-resfriando';
            else estadoClass += 'estado-normal';
            estadoEl.className = estadoClass;
            
            const sistemaEl = document.getElementById('sistema-ativo');
            sistemaEl.innerText = telemetry.sistemaAtivo ? 'SIM' : 'N√ÉO';
            sistemaEl.className = 'metric-value ' + (telemetry.sistemaAtivo ? 'status-on' : 'status-off');
            
            const interrupcaoEl = document.getElementById('interrupcao');
            interrupcaoEl.innerText = telemetry.interrupcaoCritica ? 'SIM' : 'N√ÉO';
            interrupcaoEl.className = 'metric-value ' + (telemetry.interrupcaoCritica ? 'status-active' : 'status-off');
            
            // Timestamp
            timestampEl.innerText = 'üì° √öltima atualiza√ß√£o: ' + new Date(telemetry.timestamp).toLocaleString('pt-BR');
        });
    </script>
</body>
</html>", "text/html");
});

// ========== API ENDPOINTS ==========

// Health Check
app.MapGet("/health", (IDevice device, IConfiguration config) =>
{
    var simulator = config.GetValue("UseSimulator", true);
    var lastTelemetry = device.LastTelemetry?.Timestamp;
    var status = device.LastTelemetry != null ? "Healthy" : "No Data";
    
    return Results.Ok(new 
    { 
        status,
        simulator,
        lastTelemetryUtc = lastTelemetry,
        momento = "MOMENTO 2 - API Industrial"
    });
});

// Telemetria atual
app.MapGet("/api/telemetry", (IDevice device) =>
{
    if (device.LastTelemetry is null)
        return Results.NoContent();
        
    return Results.Ok(device.LastTelemetry);
});

// Telemetria formatada para dashboard
app.MapGet("/api/dashboard", (IDevice device) =>
{
    if (device.LastTelemetry is null)
        return Results.NoContent();
        
    var telemetry = device.LastTelemetry;
    
    var dashboard = new
    {
        temperatura = new
        {
            atual = telemetry.TemperaturaAtual,
            setpoint = telemetry.SetPoint,
            alarme = telemetry.TemperaturaAlarme,
            critica = telemetry.TemperaturaCritica
        },
        atuadores = new
        {
            macarico = telemetry.MacaricoLigado,
            ventilador = telemetry.VentiladorLigado,
            alarme = telemetry.AlarmeAtivo
        },
        sistema = new
        {
            ativo = telemetry.SistemaAtivo,
            interrupcaoCritica = telemetry.InterrupcaoCritica,
            estado = telemetry.Estado
        },
        timestamp = telemetry.Timestamp
    };
    
    return Results.Ok(dashboard);
});

// √öltimo log de comunica√ß√£o
app.MapGet("/api/logs/last", (LastLogService logService) =>
{
    if (logService.TimestampUtc is null)
        return Results.NoContent();
        
    return Results.Ok(new 
    { 
        command = logService.Command,
        response = logService.Response,
        timestampUtc = logService.TimestampUtc 
    });
});

// Enviar comando para dispositivo
app.MapPost("/api/command", async (
    IDevice device, 
    LastLogService logService, 
    [FromBody] CommandRequest request) =>
{
    try
    {
        var response = await device.SendAsync(request.Command);
        logService.Set(request.Command, response);
        
        return Results.Ok(new 
        { 
            command = request.Command,
            response,
            success = true,
            timestamp = DateTime.UtcNow
        });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao enviar comando: {ex.Message}");
    }
});

// Configurar setpoint
app.MapPost("/api/setpoint", async (
    IDevice device,
    [FromBody] SetpointRequest request) =>
{
    try
    {
        var command = $"SET_TEMP={request.Temperature}";
        var response = await device.SendAsync(command);
        
        return Results.Ok(new 
        { 
            setpoint = request.Temperature,
            response,
            success = true
        });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao alterar setpoint: {ex.Message}");
    }
});

// Parada de emerg√™ncia
app.MapPost("/api/emergency-stop", async (IDevice device) =>
{
    try
    {
        var response = await device.SendAsync("EMERGENCY_STOP");
        return Results.Ok(new { message = "Parada de emerg√™ncia ativada", response });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro na parada de emerg√™ncia: {ex.Message}");
    }
});

// Reset do sistema
app.MapPost("/api/reset", async (IDevice device) =>
{
    try
    {
        var response = await device.SendAsync("RESET_SYSTEM");
        return Results.Ok(new { message = "Sistema resetado", response });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao resetar sistema: {ex.Message}");
    }
});

Console.WriteLine("üöÄ API do Forno Industrial - MOMENTO 2");
Console.WriteLine("üì° SignalR Hub: /hubs/forno");
Console.WriteLine("üîó Health Check: /health");
Console.WriteLine("üìä Dashboard: /api/dashboard");

app.Run();

// ========== HOSTED SERVICE ==========
public sealed class DeviceHost : IHostedService
{
    private readonly IDevice _device;
    private readonly ILogger<DeviceHost> _logger;

    public DeviceHost(IDevice device, ILogger<DeviceHost> logger)
    {
        _device = device;
        _logger = logger;
    }

    public async Task StartAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("üî• Iniciando comunica√ß√£o com dispositivo...");
        await _device.StartAsync(cancellationToken);
    }

    public async Task StopAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("üõë Parando comunica√ß√£o com dispositivo...");
        await _device.StopAsync(cancellationToken);
    }
}

// ========== REQUEST MODELS ==========
public record CommandRequest(string Command);
public record SetpointRequest(double Temperature);
