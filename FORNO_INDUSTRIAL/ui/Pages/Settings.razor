@page "/settings"
@inject FornoSignalRService SignalRService
@inject FornoApiService ApiService
@using Forno.Ui.Models
@using Forno.Ui.Services
@implements IAsyncDisposable

<PageTitle>‚öôÔ∏è Configura√ß√µes - Dashboard SCADA</PageTitle>

<div class="row">
    <div class="col-lg-6">
        <div class="card bg-dark text-white">
            <div class="card-header">
                <h4><i class="fas fa-thermometer-full"></i> Limites de Temperatura</h4>
            </div>
            <div class="card-body">
                @if (_currentTelemetry != null)
                {
                    <div class="mb-3">
                        <label class="form-label">Setpoint Operacional (¬∞C):</label>
                        <input type="number" class="form-control" 
                               @bind="_tempSetpoint" 
                               min="1000" max="1800" step="10" />
                        <div class="form-text">Atual: @_currentTelemetry.SetPoint¬∞C</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Limite de Alarme (¬∞C):</label>
                        <input type="number" class="form-control" 
                               @bind="_tempAlarme" 
                               min="1000" max="1900" step="10" />
                        <div class="form-text">Atual: @_currentTelemetry.TemperaturaAlarme¬∞C</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Limite Cr√≠tico (¬∞C):</label>
                        <input type="number" class="form-control" 
                               @bind="_tempCritica" 
                               min="1000" max="2000" step="10" />
                        <div class="form-text">Atual: @_currentTelemetry.TemperaturaCritica¬∞C</div>
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="ApplyTemperatureSettings">
                            <i class="fas fa-save"></i> Aplicar Configura√ß√µes
                        </button>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status"></div>
                        <p class="mt-2">Carregando configura√ß√µes...</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <div class="card bg-dark text-white">
            <div class="card-header">
                <h4><i class="fas fa-cogs"></i> Configura√ß√µes do Sistema</h4>
            </div>
            <div class="card-body">
                <!-- Configura√ß√µes de Conex√£o -->
                <div class="mb-4">
                    <h6><i class="fas fa-wifi"></i> Conex√£o</h6>
                    <div class="alert @(_isConnected ? "alert-success" : "alert-danger")">
                        Status: @(_isConnected ? "üü¢ Conectado" : "üî¥ Desconectado")
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">URL da API:</label>
                        <input type="text" class="form-control" 
                               @bind="_apiUrl" readonly />
                    </div>
                    
                    <button class="btn btn-outline-info" @onclick="ReconnectSignalR">
                        <i class="fas fa-sync-alt"></i> Reconectar SignalR
                    </button>
                </div>

                <!-- Configura√ß√µes de Seguran√ßa -->
                <div class="mb-4">
                    <h6><i class="fas fa-shield-alt"></i> Seguran√ßa</h6>
                    
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" 
                               @bind="_enableAutoShutdown" id="autoShutdown">
                        <label class="form-check-label" for="autoShutdown">
                            Desligamento autom√°tico em emerg√™ncia
                        </label>
                    </div>
                    
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" 
                               @bind="_enableAlarmNotifications" id="alarmNotifications">
                        <label class="form-check-label" for="alarmNotifications">
                            Notifica√ß√µes de alarme ativas
                        </label>
                    </div>
                </div>

                <!-- Controles Manuais -->
                <div class="mb-4">
                    <h6><i class="fas fa-hand-paper"></i> Controles Manuais</h6>
                    
                    <div class="mb-3">
                        <label class="form-label">PWM Ma√ßarico (0-255):</label>
                        <input type="range" class="form-range" 
                               @bind="_manualHeaterPWM" 
                               min="0" max="255" step="1" />
                        <div class="form-text">Valor: @_manualHeaterPWM</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">PWM Ventilador (0-255):</label>
                        <input type="range" class="form-range" 
                               @bind="_manualFanPWM" 
                               min="0" max="255" step="1" />
                        <div class="form-text">Valor: @_manualFanPWM</div>
                    </div>
                    
                    <div class="alert alert-warning">
                        <small><i class="fas fa-exclamation-triangle"></i> 
                        Controles manuais apenas para modo manual do sistema</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Status do Sistema -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card bg-dark text-white">
            <div class="card-header">
                <h4><i class="fas fa-info-circle"></i> Informa√ß√µes do Sistema</h4>
            </div>
            <div class="card-body">
                @if (_currentTelemetry != null)
                {
                    <div class="row">
                        <div class="col-md-4">
                            <strong>Estado Sistema:</strong><br>
                            <span class="badge @GetStatusBadgeClass(_currentTelemetry.Estado)">@_currentTelemetry.Estado</span>
                        </div>
                        <div class="col-md-4">
                            <strong>√öltima Atualiza√ß√£o:</strong><br>
                            @_currentTelemetry.Timestamp.ToString("dd/MM HH:mm:ss")
                        </div>
                        <div class="col-md-3">
                            <strong>Uptime Sistema:</strong><br>
                            @GetUptime()
                        </div>
                    </div>
                    
                    <hr class="my-4" />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Atuadores:</h6>
                            <ul class="list-unstyled">
                                <li>üî• Ma√ßarico: <strong>@(_currentTelemetry.MacaricoLigado ? "Ligado" : "Desligado")</strong></li>
                                <li>üåÄ Ventilador: <strong>@(_currentTelemetry.VentiladorLigado ? "Ligado" : "Desligado")</strong></li>
                                <li>‚ö†Ô∏è Alarme: <strong>@(_currentTelemetry.AlarmeAtivo ? "Ativo" : "Inativo")</strong></li>
                                <li>üö® Interrup√ß√£o: <strong>@(_currentTelemetry.InterrupcaoCritica ? "Ativa" : "Inativa")</strong></li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Limites Atuais:</h6>
                            <ul class="list-unstyled">
                                <li>üìä Setpoint: <strong>@_currentTelemetry.SetPoint¬∞C</strong></li>
                                <li>‚ö†Ô∏è Alarme: <strong>@_currentTelemetry.TemperaturaAlarme¬∞C</strong></li>
                                <li>üö® Cr√≠tico: <strong>@_currentTelemetry.TemperaturaCritica¬∞C</strong></li>
                                <li>üå°Ô∏è Atual: <strong class="@GetTemperatureClass(_currentTelemetry.TemperaturaAtual)">@_currentTelemetry.TemperaturaAtual.ToString("F1")¬∞C</strong></li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Telemetry? _currentTelemetry;
    private bool _isConnected = false;
    private DateTime _systemStartTime = DateTime.Now;

    // Configura√ß√µes tempor√°rias para edi√ß√£o
    private double _tempSetpoint = 1500;
    private double _tempAlarme = 1700;
    private double _tempCritica = 1800;
    private string _apiUrl = "http://localhost:5000";
    private bool _enableAutoShutdown = true;
    private bool _enableAlarmNotifications = true;
    private int _manualHeaterPWM = 0;
    private int _manualFanPWM = 0;

    protected override async Task OnInitializedAsync()
    {
        // Configurar eventos
        SignalRService.TelemetryReceived += OnTelemetryReceived;
        SignalRService.ConnectionChanged += OnConnectionChanged;
        
        // Iniciar conex√£o se n√£o estiver conectado
        if (!SignalRService.IsConnected)
        {
            await SignalRService.StartAsync();
        }
        
        // Tentar obter dados iniciais
        _currentTelemetry = await ApiService.GetTelemetryAsync();
        if (_currentTelemetry != null)
        {
            _tempSetpoint = _currentTelemetry.SetPoint;
            _tempAlarme = _currentTelemetry.TemperaturaAlarme;
            _tempCritica = _currentTelemetry.TemperaturaCritica;
        }
    }

    private void OnTelemetryReceived(object? sender, Telemetry telemetry)
    {
        _currentTelemetry = telemetry;
        InvokeAsync(StateHasChanged);
    }

    private void OnConnectionChanged(object? sender, bool isConnected)
    {
        _isConnected = isConnected;
        InvokeAsync(StateHasChanged);
    }

    private async Task ApplyTemperatureSettings()
    {
        // Aqui voc√™ aplicaria as configura√ß√µes via API
        // Por enquanto, apenas simulamos
        await ApiService.SetTemperatureAsync(_tempSetpoint);
        // Adicionar calls para configurar limites de alarme se dispon√≠vel na API
    }

    private async Task ReconnectSignalR()
    {
        await SignalRService.StopAsync();
        await Task.Delay(1000);
        await SignalRService.StartAsync();
    }

    private string GetStatusBadgeClass(string estado)
    {
        return estado.ToLower() switch
        {
            var s when s.Contains("critica") => "bg-danger",
            var s when s.Contains("alarme") => "bg-warning",
            var s when s.Contains("aquecendo") => "bg-primary",
            var s when s.Contains("resfriando") => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetTemperatureClass(double temp)
    {
        if (temp >= AlarmThresholds.TEMP_CRITICA) return "text-danger fw-bold";
        if (temp >= AlarmThresholds.TEMP_ALARME) return "text-warning fw-bold";
        return "text-success";
    }

    private string GetUptime()
    {
        var uptime = DateTime.Now - _systemStartTime;
        return $"{uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
    }

    public ValueTask DisposeAsync()
    {
        SignalRService.TelemetryReceived -= OnTelemetryReceived;
        SignalRService.ConnectionChanged -= OnConnectionChanged;
        return ValueTask.CompletedTask;
    }
}
