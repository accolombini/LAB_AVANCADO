@page "/"
@inject FornoSignalRService SignalRService
@inject FornoApiService ApiService
@inject IJSRuntime JSRuntime
@using Forno.Ui.Models
@using Forno.Ui.Services
@implements IAsyncDisposable

<PageTitle>üî• Forno Industrial - SCADA Dashboard</PageTitle>

<!-- Header do SCADA -->
<div class="scada-header mb-4">
    <div class="row align-items-center">
        <div class="col-md-8">
            <h1 class="scada-title mb-0">üî• Forno Industrial - SCADA Dashboard</h1>
            <p class="subtitle mb-0">MOMENTO 3 - Monitoramento e Controle em Tempo Real</p>
        </div>
        <div class="col-md-4 text-end">
            <div class="connection-status">
                <span class="status-indicator @(_isConnected ? "status-online" : "status-offline")"></span>
                <span class="status-text">@(_isConnected ? "üü¢ Sistema Online" : "üî¥ Sistema Offline")</span>
                <div class="timestamp">@DateTime.Now.ToString("HH:mm:ss")</div>
            </div>
        </div>
    </div>
</div>

<!-- Painel de Status Cr√≠tico -->
@if (_currentTelemetry?.InterrupcaoCritica == true)
{
    <div class="critical-alert-panel mb-4">
        <div class="critical-content">
            <div class="critical-icon">üö®</div>
            <div class="critical-text">
                <h2>INTERRUP√á√ÉO CR√çTICA ATIVA</h2>
                <p>Temperatura: @_currentTelemetry.TemperaturaAtual.ToString("F1")¬∞C - Sistema em Resfriamento For√ßado</p>
            </div>
            <div class="critical-actions">
                <button class="btn btn-danger btn-lg emergency-stop" @onclick="EmergencyStop">
                    üõë PARADA TOTAL
                </button>
            </div>
        </div>
    </div>
}
else if (_currentTelemetry?.AlarmeAtivo == true)
{
    <div class="warning-alert-panel mb-4">
        <div class="warning-content">
            <div class="warning-icon">‚ö†Ô∏è</div>
            <div class="warning-text">
                <h3>ALARME DE TEMPERATURA ATIVO</h3>
                <p>Temperatura atingiu @_currentTelemetry.TemperaturaAtual.ToString("F1")¬∞C - Monitore o sistema</p>
            </div>
        </div>
    </div>
}

@if (_currentTelemetry != null)
{
    <!-- Dashboard Principal -->
    <div class="row">
        <!-- Gauge de Temperatura Principal -->
        <div class="col-lg-5 col-md-6 mb-4">
            <div class="card scada-card h-100">
                <div class="card-header">
                    <h5><i class="fas fa-thermometer-half"></i> Temperatura Principal</h5>
                </div>
                <div class="card-body text-center">
                    <div class="temperature-gauge-container">
                        <div id="temperature-gauge" style="height: 350px;"></div>
                    </div>
                    <div class="temperature-info mt-3">
                        <div class="temp-current @GetTemperatureClass(_currentTelemetry.TemperaturaAtual)">
                            @_currentTelemetry.TemperaturaAtual.ToString("F1")¬∞C
                        </div>
                        <div class="temp-setpoint">
                            Setpoint: @_currentTelemetry.SetPoint.ToString("F0")¬∞C
                        </div>
                        <div class="temp-range">
                            Alarme: @_currentTelemetry.TemperaturaAlarme¬∞C | 
                            Cr√≠tico: @_currentTelemetry.TemperaturaCritica¬∞C
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status dos Atuadores -->
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card scada-card h-100">
                <div class="card-header">
                    <h5><i class="fas fa-cogs"></i> Status dos Atuadores</h5>
                </div>
                <div class="card-body">
                    <div class="actuators-grid">
                        <!-- Ma√ßarico -->
                        <div class="actuator-card @(_currentTelemetry.MacaricoLigado ? "actuator-active" : "actuator-inactive")">
                            <div class="actuator-icon">
                                <i class="fas fa-fire"></i>
                            </div>
                            <div class="actuator-info">
                                <div class="actuator-name">Ma√ßarico</div>
                                <div class="actuator-status">@(_currentTelemetry.MacaricoLigado ? "LIGADO" : "DESLIGADO")</div>
                            </div>
                            <div class="actuator-indicator @(_currentTelemetry.MacaricoLigado ? "led-on" : "led-off")"></div>
                        </div>

                        <!-- Ventilador -->
                        <div class="actuator-card @(_currentTelemetry.VentiladorLigado ? "actuator-active" : "actuator-inactive")">
                            <div class="actuator-icon">
                                <i class="fas fa-wind"></i>
                            </div>
                            <div class="actuator-info">
                                <div class="actuator-name">Ventilador</div>
                                <div class="actuator-status">@(_currentTelemetry.VentiladorLigado ? "LIGADO" : "DESLIGADO")</div>
                            </div>
                            <div class="actuator-indicator @(_currentTelemetry.VentiladorLigado ? "led-on" : "led-off")"></div>
                        </div>

                        <!-- Alarme -->
                        <div class="actuator-card @(_currentTelemetry.AlarmeAtivo ? "actuator-alarm" : "actuator-inactive")">
                            <div class="actuator-icon">
                                <i class="fas fa-bullhorn"></i>
                            </div>
                            <div class="actuator-info">
                                <div class="actuator-name">Alarme</div>
                                <div class="actuator-status">@(_currentTelemetry.AlarmeAtivo ? "ATIVO" : "INATIVO")</div>
                            </div>
                            <div class="actuator-indicator @(_currentTelemetry.AlarmeAtivo ? "led-alarm" : "led-off")"></div>
                        </div>
                    </div>

                    <!-- Estado do Sistema -->
                    <div class="system-state mt-4">
                        <h6>Estado do Sistema:</h6>
                        <div class="state-display @GetStateClass(_currentTelemetry.Estado)">
                            @_currentTelemetry.Estado
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Painel de Controles -->
        <div class="col-lg-3 col-md-12 mb-4">
            <div class="card scada-card h-100">
                <div class="card-header">
                    <h5><i class="fas fa-sliders-h"></i> Controles</h5>
                </div>
                <div class="card-body">
                    <!-- Controle de Setpoint -->
                    <div class="control-group mb-4">
                        <label class="control-label">Setpoint (¬∞C)</label>
                        <div class="setpoint-control">
                            <input type="number" class="form-control control-input" 
                                   @bind="newSetpoint" 
                                   min="1000" max="1800" step="10" />
                            <button class="btn btn-primary control-button mt-2" 
                                    @onclick="SetTemperature" 
                                    disabled="@(!_isConnected)">
                                <i class="fas fa-check"></i> Aplicar
                            </button>
                        </div>
                    </div>
                    
                    <!-- Bot√µes de A√ß√£o -->
                    <div class="action-buttons">
                        <button class="btn btn-warning action-btn mb-2" 
                                @onclick="ResetSystem" 
                                disabled="@(!_isConnected)">
                            <i class="fas fa-redo"></i> Reset Sistema
                        </button>
                        
                        <button class="btn btn-danger emergency-button" 
                                @onclick="EmergencyStop" 
                                disabled="@(!_isConnected)">
                            <i class="fas fa-exclamation-triangle"></i> PARADA EMERG√äNCIA
                        </button>
                    </div>

                    <!-- Indicadores de Status -->
                    <div class="status-indicators mt-4">
                        <div class="indicator-row">
                            <span class="indicator-label">Conex√£o:</span>
                            <span class="indicator-value @(_isConnected ? "text-success" : "text-danger")">
                                @(_isConnected ? "Online" : "Offline")
                            </span>
                        </div>
                        <div class="indicator-row">
                            <span class="indicator-label">Sistema:</span>
                            <span class="indicator-value @(_currentTelemetry.SistemaAtivo ? "text-success" : "text-danger")">
                                @(_currentTelemetry.SistemaAtivo ? "Ativo" : "Inativo")
                            </span>
                        </div>
                        <div class="indicator-row">
                            <span class="indicator-label">√öltima Atualiza√ß√£o:</span>
                            <span class="indicator-value">@_currentTelemetry.Timestamp.ToString("HH:mm:ss")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Gr√°ficos e Tend√™ncias -->
    <div class="row">
        <!-- Gr√°fico de Tend√™ncia Principal -->
        <div class="col-lg-8 col-md-12 mb-4">
            <div class="card scada-card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Tend√™ncia de Temperatura em Tempo Real</h5>
                </div>
                <div class="card-body">
                    <div id="temperature-trend-chart" style="height: 400px;"></div>
                </div>
            </div>
        </div>

        <!-- Gr√°fico Circular de Estado -->
        <div class="col-lg-4 col-md-12 mb-4">
            <div class="card scada-card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Distribui√ß√£o de Estados</h5>
                </div>
                <div class="card-body">
                    <div id="status-pie-chart" style="height: 400px;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Painel de Estat√≠sticas -->
    <div class="row">
        <div class="col-12">
            <div class="card scada-card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> Estat√≠sticas Operacionais</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-thermometer-three-quarters"></i></div>
                                <div class="stat-value">@GetTemperatureAverage().ToString("F1")¬∞C</div>
                                <div class="stat-label">Temperatura M√©dia</div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-arrow-up"></i></div>
                                <div class="stat-value">@GetMaxTemperature().ToString("F1")¬∞C</div>
                                <div class="stat-label">M√°xima Registrada</div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-clock"></i></div>
                                <div class="stat-value">@GetUptimeMinutes()</div>
                                <div class="stat-label">Tempo Online (min)</div>
                            </div>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon"><i class="fas fa-fire"></i></div>
                                <div class="stat-value">@GetMacaricoActivePercentage().ToString("F0")%</div>
                                <div class="stat-label">Ma√ßarico Ativo</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
        <p class="mt-3">Aguardando dados do forno...</p>
    </div>
}

@code {
    private Telemetry? _currentTelemetry;
    private bool _isConnected = false;
    private double newSetpoint = 1500;
    private List<TemperatureDataPoint> _temperatureHistory = new();
    private List<StateHistoryItem> _stateHistory = new();
    private DateTime _startTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        // Configurar eventos
        SignalRService.TelemetryReceived += OnTelemetryReceived;
        SignalRService.ConnectionChanged += OnConnectionChanged;
        
        // Iniciar conex√£o se n√£o estiver conectado
        if (!SignalRService.IsConnected)
        {
            await SignalRService.StartAsync();
        }
        
        // Atualizar status de conex√£o
        _isConnected = SignalRService.IsConnected;
        
        // Tentar obter dados iniciais
        _currentTelemetry = await ApiService.GetTelemetryAsync();
        if (_currentTelemetry != null)
        {
            newSetpoint = _currentTelemetry.SetPoint;
            AddTemperaturePoint(_currentTelemetry);
            AddStatePoint(_currentTelemetry);
            // Se conseguimos obter dados da API, consideramos sistema online
            _isConnected = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Aguardar um pouco para garantir que Plotly carregou
            await Task.Delay(500);
            await InitializeCharts();
        }
    }

    private async Task InitializeCharts()
    {
        try
        {
            // Verificar se Plotly est√° dispon√≠vel
            var plotlyLoaded = await JSRuntime.InvokeAsync<bool>("eval", "typeof Plotly !== 'undefined'");
            if (!plotlyLoaded)
            {
                // Tentar novamente ap√≥s um delay
                await Task.Delay(1000);
                plotlyLoaded = await JSRuntime.InvokeAsync<bool>("eval", "typeof Plotly !== 'undefined'");
            }

            if (plotlyLoaded)
            {
                // Inicializar gauge de temperatura
                if (_currentTelemetry != null)
                {
                    await JSRuntime.InvokeVoidAsync("initTemperatureGauge", 
                        "temperature-gauge", 
                        _currentTelemetry.TemperaturaAtual, 
                        _currentTelemetry.SetPoint);
                }
                
                // Inicializar gr√°fico de tend√™ncia
                await JSRuntime.InvokeVoidAsync("initTrendChart", "temperature-trend-chart");
                
                // Inicializar gr√°fico circular
                await JSRuntime.InvokeVoidAsync("initStatusPieChart", "status-pie-chart");
            }
            else
            {
                // Log do problema
                Console.WriteLine("‚ùå Plotly n√£o carregado - gr√°ficos n√£o inicializados");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao inicializar gr√°ficos: {ex.Message}");
        }
    }

    private void OnTelemetryReceived(object? sender, Telemetry telemetry)
    {
        _currentTelemetry = telemetry;
        _isConnected = true; // Se recebemos dados, sistema est√° online
        AddTemperaturePoint(telemetry);
        AddStatePoint(telemetry);
        InvokeAsync(StateHasChanged);
        InvokeAsync(() => UpdateCharts(telemetry));
    }

    private async Task UpdateCharts(Telemetry telemetry)
    {
        try
        {
            // Verificar se Plotly est√° dispon√≠vel
            var plotlyLoaded = await JSRuntime.InvokeAsync<bool>("eval", "typeof Plotly !== 'undefined'");
            if (!plotlyLoaded)
            {
                Console.WriteLine("‚ùå Plotly n√£o dispon√≠vel para atualiza√ß√£o dos gr√°ficos");
                return;
            }

            // Atualizar gauge
            await JSRuntime.InvokeVoidAsync("updateTemperatureGauge",
                "temperature-gauge",
                telemetry.TemperaturaAtual,
                telemetry.SetPoint);

            // Atualizar gr√°fico de tend√™ncia
            await JSRuntime.InvokeVoidAsync("updateTrendChart",
                "temperature-trend-chart",
                telemetry.Timestamp,
                telemetry.TemperaturaAtual,
                telemetry.SetPoint,
                telemetry.TemperaturaAlarme,
                telemetry.TemperaturaCritica);

            // Atualizar gr√°fico circular
            await JSRuntime.InvokeVoidAsync("updateStatusPieChart",
                "status-pie-chart",
                GetStateDistribution());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao atualizar gr√°ficos: {ex.Message}");
        }
    }

    private void OnConnectionChanged(object? sender, bool isConnected)
    {
        _isConnected = isConnected;
        InvokeAsync(StateHasChanged);
    }

    private void AddTemperaturePoint(Telemetry telemetry)
    {
        _temperatureHistory.Add(new TemperatureDataPoint(
            telemetry.Timestamp,
            telemetry.TemperaturaAtual,
            telemetry.Estado
        ));
        
        // Manter apenas √∫ltimos 100 pontos
        if (_temperatureHistory.Count > 100)
        {
            _temperatureHistory.RemoveAt(0);
        }
    }

    private void AddStatePoint(Telemetry telemetry)
    {
        _stateHistory.Add(new StateHistoryItem(
            telemetry.Timestamp,
            telemetry.Estado,
            telemetry.MacaricoLigado,
            telemetry.VentiladorLigado,
            telemetry.AlarmeAtivo
        ));
        
        // Manter apenas √∫ltimos 200 pontos
        if (_stateHistory.Count > 200)
        {
            _stateHistory.RemoveAt(0);
        }
    }

    private string GetTemperatureClass(double temp)
    {
        if (temp >= AlarmThresholds.TEMP_CRITICA) return "temp-critical";
        if (temp >= AlarmThresholds.TEMP_ALARME) return "temp-warning";
        return "temp-normal";
    }

    private string GetStateClass(string estado)
    {
        return estado.ToLower() switch
        {
            var s when s.Contains("critica") => "state-critical",
            var s when s.Contains("alarme") => "state-warning",
            var s when s.Contains("aquecendo") => "state-heating",
            var s when s.Contains("resfriando") => "state-cooling",
            _ => "state-normal"
        };
    }

    private double GetTemperatureAverage()
    {
        if (_temperatureHistory.Count == 0) return 0;
        return _temperatureHistory.Average(p => p.Temperature);
    }

    private double GetMaxTemperature()
    {
        if (_temperatureHistory.Count == 0) return 0;
        return _temperatureHistory.Max(p => p.Temperature);
    }

    private int GetUptimeMinutes()
    {
        return (int)(DateTime.Now - _startTime).TotalMinutes;
    }

    private double GetMacaricoActivePercentage()
    {
        if (_stateHistory.Count == 0) return 0;
        var activeCount = _stateHistory.Count(s => s.MacaricoLigado);
        return (double)activeCount / _stateHistory.Count * 100;
    }

    private object GetStateDistribution()
    {
        if (_stateHistory.Count == 0) return new { };
        
        var states = _stateHistory.GroupBy(s => s.Estado)
                                 .ToDictionary(g => g.Key, g => g.Count());
        
        return states;
    }

    private async Task SetTemperature()
    {
        if (await ApiService.SetTemperatureAsync(newSetpoint))
        {
            // Success feedback could be added here
        }
    }

    private async Task ResetSystem()
    {
        await ApiService.ResetSystemAsync();
    }

    private async Task EmergencyStop()
    {
        await ApiService.EmergencyStopAsync();
    }

    public ValueTask DisposeAsync()
    {
        SignalRService.TelemetryReceived -= OnTelemetryReceived;
        SignalRService.ConnectionChanged -= OnConnectionChanged;
        return ValueTask.CompletedTask;
    }

    // Records para armazenar hist√≥rico
    private record TemperatureDataPoint(DateTime Timestamp, double Temperature, string State);
    private record StateHistoryItem(DateTime Timestamp, string Estado, bool MacaricoLigado, bool VentiladorLigado, bool AlarmeAtivo);
}
